[project]
name = "micro-grad"
version = "0.1.0"
description = "Default template for PDM package"
authors = [
    {name = "Taimur Ibrahim", email = "tai.him18@gmail.com"},
]
dependencies = ["numpy>=2.2.2", "matplotlib>=3.10.0"]
requires-python = "==3.12.*"
readme = "README.md"
license = {text = "MIT"}
packages = ["src", "tests"]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "mypy>=1.14.1",
    "pytest-cov>=6.0.0",
]

[tool.ruff]
exclude = ["scripts", "tests"]
line-length = 120
target-version = "py312"
lint.select = [
    "ALL",
]
lint.ignore = [
    "ANN401", # dynamically typed ANY
    "D100", # # pydocstyle - missing docstring in public module
    "D104", # pydocstyle - missing docstring in public package
    "D107", # pydocstyle - missing docstring in __init__
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "E501", # pycodestyle line too long, handled by ruff format
    "EM", # Exception messages,
    "FIX", # we allow todo and fixme comments
    "PLR2004", # Magic variables, we allow them
    "TD", # we allow todo and fixme comments
    "TRY", # Try except block, rules are too strict
    "COM812", # Conflicts with formatter
    "ISC001", # Conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ANN",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "INP",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PT006",
    "PT007",
    "PT011",
    "PT019",
    "PYI",
    "RSE",
    "S",
    "S101",
    "SIM",
    "SLF",
    "TCH",
    "TRY",
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src", "functions", "e2e", "db", "tests", "openapi"]

[tool.ruff.lint.pylint]
max-args = 10
max-returns = 10

[tool.mypy]
packages = ["src"]
python_version = "3.12"
disable_error_code = 'import-untyped'
implicit_reexport = false
show_error_codes = true
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_any_generics = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "scripts.*"
ignore_missing_imports = true

[tool.pdm]
distribution = false

[tool.pdm.scripts]
mypy = "mypy ."
test = "pytest ."
scratchpad = "python -m scripts.scratchpad"